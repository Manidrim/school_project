name: CI
permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-docker:
    name: Docker Linting
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          verbose: true
          failure-threshold: error
      
      - name: Validate Docker Compose files
        run: |
          docker compose -f compose.yaml config -q
          docker compose -f compose.yaml -f compose.override.yaml config -q
          docker compose -f compose.yaml -f compose.prod.yaml config -q

  php-analysis:
    name: PHP Tests & Analysis
    runs-on: ubuntu-latest
    needs: [lint-docker]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build Docker images
        run: |
          docker compose build --pull
          docker image prune -f
      
      - name: Start services
        run: docker compose up --wait --no-build
      
      - name: Wait for services to stabilize
        run: sleep 10
      
      - name: Verify services health
        run: |
          echo "=== Services Status ==="
          docker compose ps
          echo "=== Health Checks ==="
          docker compose exec -T php curl -f http://localhost:2019/metrics || echo "Caddy metrics check failed"
          curl -f http://localhost --max-time 30 || echo "HTTP check failed"
          curl -fk https://localhost --max-time 30 || echo "HTTPS check failed"
      
      - name: Prepare test environment
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create --if-not-exists
          docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      
      - name: Run PHP unit tests and checks
        run: |
          make test-coverage-check
          make lint-phpstan
          docker compose exec -T php vendor/bin/phpmd src text phpmd.xml
          docker compose exec -T php vendor/bin/php-cs-fixer fix --dry-run --verbose --diff
          docker compose exec -T php bin/console -e test doctrine:schema:validate
      
      - name: Upload PHP Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./api/var/coverage/clover.xml
          flags: php
          name: php-coverage
          fail_ci_if_error: false

  frontend-analysis:
    name: Frontend Tests & Analysis
    runs-on: ubuntu-latest
    needs: [php-analysis]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Build Docker images
        run: |
          docker compose build --pull
          docker image prune -f
      
      - name: Start services
        run: docker compose up --wait --no-build
      
      - name: Run frontend tests and checks
        run: |
          make test-frontend-coverage-check
          make lint-eslint
          docker compose exec -T pwa npx tsc --noEmit
      
      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./pwa/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-analysis]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker compose build --pull
          docker image prune -f

      - name: Start services
        run: docker compose up --wait --no-build

      - name: Prepare test environment
        run: |
          docker compose exec -T php bin/console -e test doctrine:database:create --if-not-exists
          docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction

      - name: Run architectural validation
        run: make lint-deptrac

      - name: Verify services health
        run: |
          echo "üîç Running system health checks..."
          
          # API Health Check
          for i in {1..3}; do
            if curl -f http://localhost/api/greetings --max-time 10; then
              echo "‚úÖ API is responding"
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå API health check failed after 3 attempts"
              docker compose logs api
              exit 1
            else
              echo "‚è≥ API check attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
          # PWA Health Check  
          for i in {1..3}; do
            if curl -f http://localhost:3000 --max-time 10; then
              echo "‚úÖ PWA is responding"
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå PWA health check failed after 3 attempts"
              docker compose logs pwa
              exit 1
            else
              echo "‚è≥ PWA check attempt $i failed, retrying..."
              sleep 5
            fi
          done

      - name: Verify No Skipped Tests
        run: |
          echo "üîç Ensuring no tests are skipped..."
          make test-no-skip

      - name: Run API Integration Tests
        run: |
          echo "üß™ Running API integration tests..."
          make test-integration-api

      - name: Run Frontend Integration Tests
        run: |
          echo "üß™ Running frontend integration tests..."
          # Check if any integration tests exist in frontend
          if docker compose exec -T pwa find __tests__ -name "*.test.tsx" -exec grep -l "integration\|e2e" {} \; | head -1; then
            make test-integration-frontend
          else
            echo "‚ö†Ô∏è No frontend integration tests found - running all frontend tests as integration validation"
            docker compose exec -T pwa pnpm test
          fi

      - name: Validate End-to-End System Integration
        run: |
          echo "üîó Running end-to-end system validation..."
          
          # Test authentication flow through both API and PWA
          echo "Testing authentication endpoints..."
          curl -f http://localhost/login --max-time 10
          
          # Test API Platform endpoints
          echo "Testing API Platform endpoints..."
          curl -f http://localhost/api --max-time 10
          
          # Validate database connectivity
          echo "Testing database connectivity..."
          docker compose exec -T php bin/console doctrine:query:sql "SELECT 1" --quiet
          
          echo "‚úÖ All integration tests completed successfully"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-docker, php-analysis, frontend-analysis, integration-tests]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          if [[ "${{ needs.lint-docker.result }}" == "success" && 
                "${{ needs.php-analysis.result }}" == "success" && 
                "${{ needs.frontend-analysis.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "‚úÖ All quality checks passed!"
            echo "üìä 100% coverage maintained across PHP and Frontend"
            echo "üèóÔ∏è Architecture validation successful"
            echo "üê≥ Docker configuration validated"
          else
            echo "‚ùå Quality gate failed!"
            echo "Lint Docker: ${{ needs.lint-docker.result }}"
            echo "PHP Analysis: ${{ needs.php-analysis.result }}"
            echo "Frontend Analysis: ${{ needs.frontend-analysis.result }}"
            echo "Integration: ${{ needs.integration-tests.result }}"
            exit 1
          fi